import asyncio
import logging
from faststream import FastStream

from consumer.core.config import bot, broker
from consumer.core.exceptions import ExceptProcessRecipeError
from consumer.vectoring.models.chroma import chrome
from consumer.utils.parser import process_recipe
from consumer.core.database import MongoManager


logger = logging.getLogger(__name__)
mongo_manager = MongoManager()

app = FastStream(broker)


@app.on_startup
async def connect_to_mongo():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastStream."""
    await mongo_manager.connect()
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ chromeDB –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastStream."""
    await chrome.init()


@app.on_shutdown
async def close_mongo():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    await mongo_manager.close()
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.")


@broker.subscriber("recipe_processing_queue")
async def handle_recipe_message(data: dict[str, str | int]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ."""
    url: str = data["url"]
    user_id: int = data["user_id"]
    chat_id: int = data["chat_id"]

    try:
        await process_recipe(
            bot=bot,
            chat_id=chat_id,
            user_id=user_id,
            url=url,
            mongo=mongo_manager,
        )
    except ExceptProcessRecipeError as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")


@broker.subscriber("recipe_search_queue")
async def handle_recipe_message(data: dict[str, str | int]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞"""
    search_text: str = data["search_text"]
    user_id: int = data["user_id"]
    chat_id: int = data["chat_id"]
    logger.info(f"–°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_text}")


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ FastStream –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è...")
    try:
        asyncio.run(app.run())
    except KeyboardInterrupt:
        logger.info("–†–∞–±–æ—Ç–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è")
