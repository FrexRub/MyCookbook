import asyncio
import logging
from faststream import FastStream

from consumer.core.config import bot, broker
from consumer.parser import process_recipe
from consumer.core.database import MongoManager

logger = logging.getLogger(__name__)
mongo_manager = MongoManager()
app = FastStream(broker)


@app.on_startup
async def connect_to_mongo():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastStream."""
    await mongo_manager.connect()
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


@app.on_shutdown
async def close_mongo():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    await mongo_manager.close()
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.")


@broker.subscriber("recipe_processing_queue")
async def handle_recipe_message(data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ."""
    url = data["url"]
    user_id = data["user_id"]
    chat_id = data["chat_id"]

    await process_recipe(
        bot=bot,
        chat_id=chat_id,
        user_id=user_id,
        url=url,
        mongo=mongo_manager,
    )


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ FastStream –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è...")
    try:
        asyncio.run(app.run())
    except KeyboardInterrupt:
        print("–†–∞–±–æ—Ç–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è")
