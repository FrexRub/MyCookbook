import asyncio
import logging
import json
import time
from typing import Any

import torch
from langchain_chroma import Chroma
from langchain.schema import Document
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter
from pydantic import BaseModel, Field
from pydantic.functional_validators import BeforeValidator
from typing_extensions import Annotated

from consumer.core.config import configure_logging, COLLECTION_NAME, CHROMA_PATH, setting
from consumer.core.exceptions import ExceptAddChromaError

PyObjectId = Annotated[str, BeforeValidator(str)]

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


class RecipeMetadate(BaseModel):
    id: PyObjectId = Field(..., description="id —Ä–µ—Ü–µ–ø—Ç–∞")
    category: str = Field(..., description="–≤–∏–¥ –±–ª—é–¥–∞")
    ingredients: dict[str, str] = Field(..., description="—Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")


class RecipeVector(BaseModel):
    text: str = Field(..., description="–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞")
    metadata: RecipeMetadate = Field(..., description="–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞")


class ChromaVectorStore:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤.
        –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ init().
        """
        self._store: Chroma | None = None

    async def init(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Chroma.
        –°–æ–∑–¥–∞–µ—Ç embeddings –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—è CUDA –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.
        """
        await asyncio.sleep(0.01)
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaVectorStore...")
        try:
            start_time = time.time()

            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ CPU
            device = "cuda" if torch.cuda.is_available() else "cpu"
            logger.info(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {device}")

            embeddings = HuggingFaceEmbeddings(
                model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2",
                model_kwargs={"device": device},
                encode_kwargs={"normalize_embeddings": True},
            )
            logger.info(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Chroma
            self._store = Chroma(
                persist_directory=CHROMA_PATH,
                embedding_function=embeddings,
                collection_name=COLLECTION_NAME,
            )

            logger.info(f"‚úÖ ChromaVectorStore —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ " f"'{COLLECTION_NAME}' –≤ '{CHROMA_PATH}'")
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromaVectorStore: {e}")
            raise

    async def asimilarity_search(self, query: str, with_score: bool, k: int = 3):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Chroma.

        Args:
            query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            with_score (bool): –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –µ—Å–ª–∏ with_score=True

        Raises:
            RuntimeError: –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        """
        if not self._store:
            raise RuntimeError("ChromaVectorStore is not initialized.")

        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ¬´{query}¬ª, top_k={k}")
        try:
            if with_score:
                results = await self._store.asimilarity_search_with_score(query=query, k=k)
            else:
                results = await self._store.asimilarity_search(query=query, k=k)

            logger.debug(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return results
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            raise

    async def split_text_into_chunks(self, recipe: RecipeVector) -> list[Any]:
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        await asyncio.sleep(0.01)

        ingredients_json: str = json.dumps(recipe.metadata.ingredients, ensure_ascii=False)
        metadata: dict[str, str] = {
            "id": str(recipe.metadata.id),
            "category": recipe.metadata.category,
            "ingredients": ingredients_json,
        }

        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=setting.max_chunk_size,
            chunk_overlap=setting.chunk_overlap,
            length_function=len,
            is_separator_regex=False,
        )

        chunks = text_splitter.create_documents(texts=[recipe.text], metadatas=[metadata])
        return chunks

    async def add_recipe(self, recipe: RecipeVector):
        if not self._store:
            raise RuntimeError("ChromaVectorStore is not initialized.")
        try:
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Chroma: {recipe.metadata.id}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤
            chunks: list[Any] = await self.split_text_into_chunks(recipe)
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è Chroma
            documents = [
                Document(
                    page_content=chunk.page_content,
                    metadata=chunk.metadata.dict() if hasattr(chunk.metadata, "dict") else chunk.metadata,
                )
                for chunk in chunks
            ]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await self._store.aadd_documents(documents=documents)

            logger.info("‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
            raise ExceptAddChromaError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")


chrome = ChromaVectorStore()
