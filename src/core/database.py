import logging
from typing import Optional

from async_pymongo import AsyncClient

from src.core.config import configure_logging, setting

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


class MongoManager:
    def __init__(self):
        self.client: Optional[AsyncClient] = None
        self.db = None
        self._is_connected: bool = False

    async def connect(self):
        if self._is_connected:
            return

        self.client = AsyncClient(setting.mongo.url)
        self.db = self.client[setting.mongo.mongo_initdb_database]
        try:
            await self.client.admin.command("ping")
            self._is_connected = True
            logger.info("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            raise

    async def close(self):
        if self.client:
            await self.client.close()
            self._is_connected = False
            logger.info("üîå MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    def get_collection(self, name: str):
        if not self._is_connected or self.db is None:
            raise RuntimeError(
                "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ connect() –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º."
            )
        return self.db[name]


mongo_manager = MongoManager()


async def mongo_middleware(handler, event, data):
    data["mongo"] = mongo_manager
    return await handler(event, data)
