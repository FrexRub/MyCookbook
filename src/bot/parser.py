import logging

from aiogram import Bot
from pymongo.errors import (
    DuplicateKeyError,
    OperationFailure,
    PyMongoError,
    ServerSelectionTimeoutError,
    WriteConcernError,
    WriteError,
)

from src.core.config import configure_logging
from src.core.database import MongoManager
from src.llm.agents import ParsingAgent

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


# noqa: C901
async def process_recipe(
    bot: Bot,
    chat_id: int,
    user_id: int,
    url: str,
    mongo: MongoManager,
) -> None:
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        agent = ParsingAgent()
        res = await agent.classify(url)

        status = res.get("status", "error").lower()
        if status != "ok":
            await bot.send_message(
                user_id,
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {res.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
            )
            return

        recipes = res.get("recipes", [])
        if not recipes:
            await bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ.")
            return

        multiple = len(recipes) > 1

        recipe_collection = mongo.get_collection("recipes")
        if multiple:
            msg_parts = ["–í –≤–∞—à—É –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –∫–Ω–∏–≥—É –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: \n"]
        else:
            msg_parts = ["–í –≤–∞—à—É –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –∫–Ω–∏–≥—É –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç: \n"]

        for index, recipe in enumerate(recipes, start=1):
            title = recipe.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            category = recipe.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            ingredients = recipe.get("ingredients", {})
            steps = recipe.get("description", [])

            if multiple:
                msg_parts.append(f"–†–µ—Ü–µ–ø—Ç ‚Ññ{index}\n{'‚Äï' * 30}")

            msg_parts.append(f"üçΩ *{title}*\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n")

            recipe_data = {
                "title": title,
                "description": steps,
                "category": category,
                "ingredients": ingredients,
                "url": url,
                "user_id": [user_id],
                "chat_id": [chat_id],
            }

            try:
                result = await recipe_collection.insert_one(recipe_data)
                logger.info(f"–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {result.inserted_id}")
            except DuplicateKeyError:
                logger.warning("–¢–∞–∫–æ–π —Ä–µ—Ü–µ–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                await bot.send_message(user_id, "–¢–∞–∫–æ–π —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")
            except (WriteError, WriteConcernError, OperationFailure) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ MongoDB: {e}")
                await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            except ServerSelectionTimeoutError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB (—Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).")
                await bot.send_message(user_id, "–°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            except PyMongoError as e:
                logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ MongoDB: {e}")
                await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")

        msg = "\n".join(msg_parts)
        await bot.send_message(user_id, msg, parse_mode="Markdown")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
