import logging
from aiogram import Bot

from src.core.config import configure_logging
from src.llm.agents import ParsingAgent

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


async def process_recipe(bot: Bot, chat_id: int, url: str):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        agent = ParsingAgent()
        result = await agent.classify(url)
        status = result.get("status", "–æ—à–∏–±–∫–∞")

        if status != "Ok":
            await bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É: {status}")
            return

        title = result["title"]
        ingredients = "\n".join([f"{k}: {v}" for k, v in result["ingredients"].items()])
        category = result["category"]
        description = "\n".join(result["description"])

        msg = (
            f"üçΩ *{title}*\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}\n\n"
            f"–≠—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{description}"
        )

        await bot.send_message(chat_id, msg, parse_mode="Markdown")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
