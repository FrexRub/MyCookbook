import logging
from aiogram import Bot

from src.core.config import configure_logging
from src.llm.agents import ParsingAgent
from src.core.database import MongoManager

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


async def process_recipe(
    bot: Bot, chat_id: int, user_id: int, url: str, mongo: MongoManager
):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ä–µ—Ü–µ–ø—Ç–∞"""
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ä–µ—Ü–µ–ø—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        agent = ParsingAgent()
        res = await agent.classify(url)

        status = res.get("status", "error").lower()
        if status != "ok":
            await bot.send_message(
                user_id,
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {res.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
            )
            return

        recipes = res.get("recipes", [])
        if not recipes:
            await bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ.")
            return

        multiple = len(recipes) > 1

        recipe_collection = mongo.get_collection("recipes")
        if multiple:
            msg_parts = [f"–í –≤–∞—à—É –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –∫–Ω–∏–≥—É –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: \n\n"]
        else:
            msg_parts = [f"–í –≤–∞—à—É –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –∫–Ω–∏–≥—É –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç: \n\n"]

        for index, recipe in enumerate(recipes, start=1):
            title = recipe.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            category = recipe.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            ingredients = recipe.get("ingredients", {})
            steps = recipe.get("description", [])

            if multiple:
                msg_parts.append(f"–†–µ—Ü–µ–ø—Ç ‚Ññ{index}\n{'‚Äï'*30}")

            msg_parts.append(f"üçΩ *{title}*\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n")

            # msg_parts.append("üßÇ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*")

            # if ingredients:
            #     msg_parts.extend([f"  ‚Ä¢ {k}: {v}" for k, v in ingredients.items()])
            # else:
            #     msg_parts.append("  (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã)")
            #
            # msg_parts.append("\nüë®‚Äçüç≥ *–≠—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:*")
            #
            # if steps:
            #     msg_parts.extend([f"  {i+1}. {step}" for i, step in enumerate(steps)])
            # else:
            #     msg_parts.append("  (—à–∞–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã)")

            # msg = "\n".join(msg_parts)

            recipe_data = {
                "title": title,
                "description": steps,
                "category": category,
                "ingredients": ingredients,
                "url": url,
                "user_id": [user_id],
                "chat_id": [chat_id],
            }

            result = await recipe_collection.insert_one(recipe_data)

            if result.inserted_id:
                logger.info("–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            else:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞.")

        msg = "\n".join(msg_parts)
        await bot.send_message(user_id, msg, parse_mode="Markdown")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
