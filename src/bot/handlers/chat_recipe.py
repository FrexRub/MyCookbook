import logging

from aiogram import Bot, Router
from aiogram.filters import Command
from aiogram.types import Message

from src.core.config import configure_logging
from src.core.database import MongoManager

router = Router()

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


@router.message(Command("my_recipes"))
async def my_recipes_info(message: Message, bot: Bot, mongo: MongoManager):
    recipe_collection = mongo.get_collection("recipes")
    user_id = message.from_user.id

    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –≥–¥–µ user_id —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ user_id –¥–æ–∫—É–º–µ–Ω—Ç–∞
        cursor = recipe_collection.find(
            {"user_id": user_id},  # —Ñ–∏–ª—å—Ç—Ä
            {"_id": 0, "title": 1, "category": 1},  # –ø—Ä–æ–µ–∫—Ü–∏—è: —Ç–æ–ª—å–∫–æ title –∏ category
        )

        recipes = await cursor.to_list(length=100)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        if not recipes:
            await bot.send_message(
                message.chat.id, "üç≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        dict_recipes: dict[str, list[str]] = {}
        for recipe in recipes:
            title = recipe.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            category = recipe.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            dict_recipes.setdefault(category, []).append(title)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_lines = ["üìö *–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:*"]
        for category, titles in dict_recipes.items():
            msg_lines.append(f"\nüìÇ *{category}*:")
            for title in titles:
                msg_lines.append(f"‚ÄÉüçΩ {title}")

        await bot.send_message(
            message.chat.id, "\n".join(msg_lines), parse_mode="Markdown"
        )

    except Exception as e:
        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {e}")


@router.message(Command("group_recipes"))
async def group_recipes_info(message: Message, bot: Bot, mongo: MongoManager):
    user_id = message.from_user.id
    groups_collection = mongo.get_collection("groups")
    recipe_collection = mongo.get_collection("recipes")

    try:
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        group = await groups_collection.find_one({"chat_users": user_id})
        if not group:
            await bot.send_message(
                message.chat.id,
                "‚ùó –í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            )
            return

        chat_id = group["chat_id"]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        cursor = recipe_collection.find(
            {"chat_id": chat_id}, {"_id": 0, "title": 1, "category": 1}
        )
        recipes = await cursor.to_list(length=100)

        if not recipes:
            await bot.send_message(
                message.chat.id, "üç≥ –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        dict_recipes: dict[str, list[str]] = {}
        for recipe in recipes:
            title = recipe.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            category = recipe.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            dict_recipes.setdefault(category, []).append(title)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg_lines = [f"üìö *–†–µ—Ü–µ–ø—Ç—ã –≥—Ä—É–ø–ø—ã {group['title']}:*"]
        for category, titles in dict_recipes.items():
            msg_lines.append(f"\nüìÇ *{category}*:")
            msg_lines.extend([f"‚ÄÉüçΩ {t}" for t in titles])

        await bot.send_message(
            message.chat.id, "\n".join(msg_lines), parse_mode="Markdown"
        )

    except Exception as e:
        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
