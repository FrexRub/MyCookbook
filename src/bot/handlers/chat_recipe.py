import logging
import asyncio
from bson import ObjectId
from bson.errors import InvalidId

from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.keyboard import (
    InlineKeyboardBuilder,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from src.core.config import configure_logging, setting
from src.core.database import MongoManager

router = Router()

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


def create_recipe_inline_kb(recipes: list[dict]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for recipe in recipes:
        title = recipe.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        id = recipe.get("_id")
        builder.row(InlineKeyboardButton(text=title, callback_data=f"id_{id}"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    builder.row(InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_home"))
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder.adjust(1)
    return builder.as_markup()


def create_categories_inline_kb(categories: list[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.row(
            InlineKeyboardButton(text=category, callback_data=f"ctg_{category}")
        )

    builder.adjust(1)
    return builder.as_markup()


@router.message(Command("my_recipes"))
async def my_recipes_info(message: Message, bot: Bot, mongo: MongoManager):
    recipe_collection = mongo.get_collection("recipes")
    user_id = message.from_user.id

    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –≥–¥–µ user_id —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ user_id –¥–æ–∫—É–º–µ–Ω—Ç–∞
        cursor = recipe_collection.find(
            {"user_id": user_id},  # —Ñ–∏–ª—å—Ç—Ä
            {"title": 1, "category": 1},  # –ø—Ä–æ–µ–∫—Ü–∏—è: —Ç–æ–ª—å–∫–æ title –∏ category
        )

        recipes = await cursor.to_list(length=100)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        if not recipes:
            await bot.send_message(
                message.chat.id, "üç≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        dict_recipes: dict[str, list[str]] = {}
        for recipe in recipes:
            title = recipe.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            category = recipe.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            dict_recipes.setdefault(category, []).append(title)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_lines = ["üìö *–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:*"]
        categories: list[str] = list()
        for category, titles in dict_recipes.items():
            msg_lines.append(f"\nüìÇ *{category}*:")
            categories.append(category)
            for title in titles:
                msg_lines.append(f"‚ÄÉüçΩ {title}")

        await bot.send_message(
            message.chat.id,
            "\n".join(msg_lines),
            parse_mode="Markdown",
            reply_markup=create_categories_inline_kb(categories),
        )

    except Exception as e:
        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {e}")


@router.message(Command("group_recipes"))
async def group_recipes_info(message: Message, bot: Bot, mongo: MongoManager):
    user_id = message.from_user.id
    groups_collection = mongo.get_collection("groups")
    recipe_collection = mongo.get_collection("recipes")

    try:
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        group = await groups_collection.find_one({"chat_users": user_id})
        if not group:
            await bot.send_message(
                message.chat.id,
                "‚ùó –í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            )
            return

        chat_id = group["chat_id"]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        cursor = recipe_collection.find(
            {"chat_id": chat_id}, {"title": 1, "category": 1}
        )
        recipes = await cursor.to_list(length=100)

        if not recipes:
            await bot.send_message(
                message.chat.id, "üç≥ –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        dict_recipes: dict[str, list[str]] = {}
        for recipe in recipes:
            title = recipe.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            category = recipe.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            dict_recipes.setdefault(category, []).append(title)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg_lines = [f"üìö *–†–µ—Ü–µ–ø—Ç—ã –≥—Ä—É–ø–ø—ã {group['title']}:*"]
        for category, titles in dict_recipes.items():
            msg_lines.append(f"\nüìÇ *{category}*:")
            msg_lines.extend([f"‚ÄÉüçΩ {t}" for t in titles])

        await bot.send_message(
            message.chat.id, "\n".join(msg_lines), parse_mode="Markdown"
        )
        await bot.send_message(
            message.chat.id,
            "–†–µ—Ü–µ–ø—Ç—ã:",
            parse_mode="Markdown",
            reply_markup=create_recipe_inline_kb(recipes),
        )

    except Exception as e:
        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")


@router.callback_query(F.data.startswith("id_"))
async def find_recipe_by_id(call: CallbackQuery, mongo: MongoManager):
    await call.answer()
    try:
        id_rec = call.data.replace("id_", "")

        if not ObjectId.is_valid(id_rec):
            await call.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–µ—Ü–µ–ø—Ç–∞")
            return

        recipe_collection = mongo.get_collection("recipes")
        recipe = await recipe_collection.find_one({"_id": ObjectId(id_rec)})

        ingredients = recipe.get("ingredients", {})
        steps = recipe.get("description", [])

        msg_parts: list[str] = [
            f"üçΩ *{recipe['title']}*\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {recipe['category']}\n"
        ]

        msg_parts.append("üßÇ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*")

        if ingredients:
            msg_parts.extend([f"  ‚Ä¢ {k}: {v}" for k, v in ingredients.items()])
        else:
            msg_parts.append("  (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã)")

        msg_parts.append("\nüë®‚Äçüç≥ *–≠—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:*")

        if steps:
            msg_parts.extend([f"  {i+1}. {step}" for i, step in enumerate(steps)])
        else:
            msg_parts.append("  (—à–∞–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã)")

        msg_parts.append(f"\nüåê *[c—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ—Ü–µ–ø—Ç–∞]({recipe['url']})*")
        msg = "\n".join(msg_parts)

        async with ChatActionSender(
            bot=setting.bot, chat_id=call.from_user.id, action="typing"
        ):
            await asyncio.sleep(2)
            await call.message.answer(msg, parse_mode="Markdown", reply_markup=None)
    except InvalidId:
        await call.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–µ—Ü–µ–ø—Ç–∞")
    except Exception as e:
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞")
        print(f"Error: {e}")


@router.callback_query(F.data.startswith("ctg_"))
async def cmd_category(call: CallbackQuery, mongo: MongoManager):
    await call.answer()
    category = call.data.replace("ctg_", "")
    recipe_collection = mongo.get_collection("recipes")
    cursor = recipe_collection.find({"category": category}, {"title": 1})
    recipes = await cursor.to_list(length=100)

    msg_text = f"–†–µ—Ü–µ–ø—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
    async with ChatActionSender(
        bot=setting.bot, chat_id=call.from_user.id, action="typing"
    ):
        await asyncio.sleep(2)
        await call.message.answer(
            msg_text, reply_markup=create_recipe_inline_kb(recipes)
        )
