import logging
import asyncio
import re
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.exceptions import TelegramForbiddenError
from aiogram.utils.chat_action import ChatActionSender

from src.core.database import MongoManager
from src.core.config import configure_logging, URL_PATTERN

router = Router()

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç –¥–ª—è –ö—É–ª–∏–Ω–∞—Ä–Ω–æ–π –∫–Ω–∏–≥–∏",
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã
@router.message(Command("group_id"))
async def group_info(message: Message, bot: Bot, mongo: MongoManager):
    chat_info = (
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n"
        f"üÜî <b>ID —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>\n"
        f"üìù <b>–¢–∏–ø —á–∞—Ç–∞:</b> {message.chat.type}\n"
        f"üë• <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {message.chat.title if message.chat.title else '–õ–∏—á–Ω—ã–π —á–∞—Ç'}\n"
        f"üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø
    if message.chat.type in ["group", "supergroup"]:
        members_count = await bot.get_chat_members_count(message.chat.id)
        chat_info += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {members_count}\n"
        chat_info += f"üë• <b>ID –≥—Ä—É–ø–ø—ã:</b> {message.chat.id}"

    await message.answer(chat_info, parse_mode="HTML")


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@router.message(F.new_chat_members)
async def welcome_new_members(message: Message):
    for user in message.new_chat_members:
        welcome_text = f"""
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}! üéâ
            
            –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:
            1. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã
            2. –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É
            3. –ù–µ —Å–ø–∞–º—å—Ç–µ
            
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä
        """
        await message.answer(welcome_text)


@router.message(F.left_chat_member)
async def goodbye_member(message: Message):
    try:
        await message.answer(f"{message.left_chat_member.full_name} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å üò¢")
    except TelegramForbiddenError:
        logger.warning("–ë–æ—Ç –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è")


@router.message(F.chat.type.in_(["group", "supergroup"]), F.text.contains("http"))
async def handle_http_url(message: Message, bot: Bot):
    chat_id = message.chat.id
    chat_title = message.chat.title
    user_name = message.from_user.first_name
    text = message.text

    url_text = re.findall(URL_PATTERN, text)

    # —ç–º–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–æ–º
    async with ChatActionSender(bot=bot, chat_id=chat_id, action="typing"):
        await asyncio.sleep(2)
        await message.answer(
            f"{user_name}, –¥–æ–±–∞–≤—å—Ç–µ —Ö–µ—à—Ç–µ–≥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞",
            disable_notification=True,
        )

    logger.info(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: '{chat_title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_name} –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ c —Ä–µ—Ü–µ–ø—Ç–∞–º–∏: {url_text}"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(F.chat.type.in_(["group", "supergroup"]), F.text)
async def handle_group_message(message: Message, bot: Bot):
    chat_id = message.chat.id
    chat_title = message.chat.title
    user_name = message.from_user.first_name
    text = message.text

    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ '{chat_title}': {user_name}: {text}")

    # –ü—Ä–∏–º–µ—Ä: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    if "–ø—Ä–∏–≤–µ—Ç –±–æ—Ç" in text.lower():
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –∑–¥–µ—Å—å! üëã")

    # if "http" in text.lower():
    #     # —ç–º–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–æ–º
    #     async with ChatActionSender(bot=bot, chat_id=chat_id, action="typing"):
    #         await asyncio.sleep(2)
    #         await message.answer(f"{user_name}, –¥–æ–±–∞–≤—å—Ç–µ —Ö–µ—à—Ç–µ–≥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞")
