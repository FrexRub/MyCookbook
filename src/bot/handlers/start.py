import logging
import re
import asyncio

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from src.bot.parser import process_recipe
from src.core.config import URL_PATTERN, configure_logging
from src.core.database import MongoManager

router = Router()

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç –¥–ª—è –ö—É–ª–∏–Ω–∞—Ä–Ω–æ–π –∫–Ω–∏–≥–∏",
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã
@router.message(Command("group_id"))
async def group_info(message: Message, bot: Bot):
    chat_info = (
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n"
        f"üÜî <b>ID —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>\n"
        f"üìù <b>–¢–∏–ø —á–∞—Ç–∞:</b> {message.chat.type}\n"
        f"üë• <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {message.chat.title if message.chat.title else '–õ–∏—á–Ω—ã–π —á–∞—Ç'}\n"
        f"üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø
    if message.chat.type in ["group", "supergroup"]:
        members_count = await bot.get_chat_members_count(message.chat.id)
        chat_info += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {members_count}\n"
        chat_info += f"üë• <b>ID –≥—Ä—É–ø–ø—ã:</b> {message.chat.id}"

    await message.answer(chat_info, parse_mode="HTML")


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@router.message(F.new_chat_members)
async def welcome_new_members(message: Message):
    for user in message.new_chat_members:
        welcome_text = f"""
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}! üéâ
            
            –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:
            1. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã
            2. –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É
            3. –ù–µ —Å–ø–∞–º—å—Ç–µ
            
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä
        """
        await message.answer(welcome_text)


@router.message(F.left_chat_member)
async def goodbye_member(message: Message):
    try:
        await message.answer(f"{message.left_chat_member.full_name} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å üò¢")
    except TelegramForbiddenError:
        logger.warning("–ë–æ—Ç –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è")


@router.message(F.chat.type.in_(["group", "supergroup"]), F.text.contains("http"))
async def handle_http_url(message: Message, mongo: MongoManager):
    chat_title = message.chat.title
    user_name = message.from_user.first_name
    text = message.text

    url_text = re.findall(URL_PATTERN, text)
    if not url_text:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    url = url_text[0]
    logger.info(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É '{chat_title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name} –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏: {url}"
    )

    recipe_collection = mongo.get_collection("recipes")
    user_id = message.from_user.id
    chat_id = message.chat.id

    existing_recipes = await recipe_collection.find({"url": url}).to_list(length=None)

    if existing_recipes:
        result = await recipe_collection.update_many(
            {"url": url}, {"$addToSet": {"user_id": user_id, "chat_id": chat_id}}
        )

        if result.modified_count > 0:
            logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {result.modified_count} —Ä–µ—Ü–µ–ø—Ç(–æ–≤).")
        else:
            logger.info("–†–µ—Ü–µ–ø—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞.")

    else:

        def on_process_done(task: asyncio.Task, msg: Message):
            async def send_message():
                if task.exception():
                    error = task.exception()
                    await msg.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error}")
                else:
                    await msg.answer(
                        "–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )

            asyncio.create_task(send_message())

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task = asyncio.create_task(
            process_recipe(
                bot=message.bot,
                chat_id=message.chat.id,
                user_id=message.from_user.id,
                url=url,
                mongo=mongo,
            )
        )

        task.add_done_callback(lambda t: on_process_done(t, message))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(F.chat.type.in_(["group", "supergroup"]), F.text)
async def handle_group_message(message: Message):
    user_name = message.from_user.first_name
    text = message.text

    # –ü—Ä–∏–º–µ—Ä: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    if "–ø—Ä–∏–≤–µ—Ç –±–æ—Ç" in text.lower():
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –∑–¥–µ—Å—å! üëã")
