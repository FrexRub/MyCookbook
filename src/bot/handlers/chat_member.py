import logging
from datetime import datetime

from aiogram import Bot, Router
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import ChatMemberUpdated

from src.core.config import configure_logging
from src.core.database import MongoManager
from src.models.mongodb import TelegramGroupModel

router = Router()

configure_logging(logging.INFO)
logger = logging.getLogger(__name__)


async def handle_bot_added_as_member(
    chat_member: ChatMemberUpdated, bot: Bot, mongo: MongoManager
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    chat_id = chat_member.chat.id
    new_status = chat_member.new_chat_member.status
    chat_title = chat_member.chat.title

    try:
        admins = await bot.get_chat_administrators(chat_id)
        creator = next((admin for admin in admins if admin.status == "creator"), None)
        if creator:
            user = creator.user

            new_group: TelegramGroupModel = TelegramGroupModel(
                title=chat_title,
                chat_id=chat_id,
                status=new_status,
                username_tg=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                user_id=user.id,
            )

        else:
            new_group: TelegramGroupModel = TelegramGroupModel(
                title=chat_title,
                chat_id=chat_id,
                status=new_status,
            )
        group_collection = mongo.get_collection("groups")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        result = await group_collection.update_one(
            {"chat_id": chat_id},
            {"$set": new_group.model_dump(by_alias=True, exclude_none=True)},
            upsert=True,
        )

        if result.upserted_id:
            logger.info(f"–î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ —Å ID: {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.info(f"–î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ —Å ID: {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    except TelegramForbiddenError:
        logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {e}")


async def handle_bot_removed(
    chat_member: ChatMemberUpdated, bot: Bot, mongo: MongoManager
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞"""
    chat_id = chat_member.chat.id
    chat_title = chat_member.chat.title

    try:
        group_collection = mongo.get_collection("groups")

        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ –±–∞–∑–µ
        group_data = await group_collection.find_one({"chat_id": chat_id})

        if group_data and group_data.get("user_id"):
            admin_user_id = group_data["user_id"]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                message_text = (
                    f"‚ùå –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã\n"
                    f"üìã –ì—Ä—É–ø–ø–∞: {chat_title}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É:\n"
                    f"https://t.me/your_bot_username?startgroup=true"
                )

                await bot.send_message(chat_id=admin_user_id, text=message_text)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_user_id}")

            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await group_collection.update_one(
            {"chat_id": chat_id},
            {"$set": {"status": "kicked", "updated_at": datetime.utcnow()}},
        )
        logger.info(f"–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'kicked'")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: {e}")


@router.my_chat_member()
async def handle_bot_status_change(
    chat_member: ChatMemberUpdated, bot: Bot, mongo: MongoManager
):
    old_status = chat_member.old_chat_member.status
    new_status = chat_member.new_chat_member.status
    chat_id = chat_member.chat.id
    chat_title = chat_member.chat.title

    logger.info(
        f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è: {chat_title} (ID: {chat_id}) - {old_status} -> {new_status}"
    )

    # –ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã - –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if new_status in ["kicked", "left"]:
        logger.info("‚ùå –ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã")

        try:
            await handle_bot_removed(chat_member, bot, mongo)

        except TelegramForbiddenError:
            logger.info(
                f"–ë–æ—Ç –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è"
            )

        return

    # –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É
    if new_status == "member":
        await handle_bot_added_as_member(chat_member, bot, mongo)

    # –ë–æ—Ç–∞ —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    elif new_status == "administrator":
        logger.info(f"–ë–æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ–∞ {chat_id}")
